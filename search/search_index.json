{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Overview","title":"Home"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#overview","text":"","title":"Overview"},{"location":"Agronomy/","text":"Introduction Brief introduction of the module, component or feature being documented. This document explains ... Overview Main Point 1 Sub Point 1.1","title":"Levridge Agronomy"},{"location":"Agronomy/#introduction","text":"Brief introduction of the module, component or feature being documented. This document explains ...","title":"Introduction"},{"location":"Agronomy/#overview","text":"","title":"Overview"},{"location":"Agronomy/#main-point-1","text":"","title":"Main Point 1"},{"location":"Agronomy/#sub-point-11","text":"","title":"Sub Point 1.1"},{"location":"Agsync/","text":"Agsync The Agsync integration is a bidirectional integration that consists of a Topic for Master Data that goes from D365 F&O to Agsync and Service Calls for Work Orders that go from Agsync to D365 F&O. Because the Work Orders utilize a direct service call to F&O there is no need for two integration instances. One aspect of the Agsync integration that is different from other integrations is the service call to D365 F&O for work orders. Another aspect that is different is that we are using CDS to provide lookup services for mapping entity identifiers between systems. We also need to filter the customers that are sent from F&O to Agsync. This will require configuring a filter on the event in F&O. Setup To integrate from D365 F&O to Agsync you will need to: Configure Event Endpoint in F&O configure Levridge Entity Events Create Filter on Entity Event to only send agronomy customers Get Client ID and CLient password from Agsync Get Customer Specific Integration ID from Agsync Client Redirect URL is [Azure Webapp base URL]/api/AgsyncAuth Setup Azure Keyvault Create an application ID for the integration framework to authenticate to D365 CRM Create an application user in D365 CRM and assign the proper role(s) Create an Azure Service bus topic Create a subscription on the topic above Configuration In the appsettings.json you will need to define the SourceConfig and TargetConfig nodes as follows:","title":"Agsync"},{"location":"Agsync/#agsync","text":"The Agsync integration is a bidirectional integration that consists of a Topic for Master Data that goes from D365 F&O to Agsync and Service Calls for Work Orders that go from Agsync to D365 F&O. Because the Work Orders utilize a direct service call to F&O there is no need for two integration instances. One aspect of the Agsync integration that is different from other integrations is the service call to D365 F&O for work orders. Another aspect that is different is that we are using CDS to provide lookup services for mapping entity identifiers between systems. We also need to filter the customers that are sent from F&O to Agsync. This will require configuring a filter on the event in F&O.","title":"Agsync"},{"location":"Agsync/#setup","text":"To integrate from D365 F&O to Agsync you will need to: Configure Event Endpoint in F&O configure Levridge Entity Events Create Filter on Entity Event to only send agronomy customers Get Client ID and CLient password from Agsync Get Customer Specific Integration ID from Agsync Client Redirect URL is [Azure Webapp base URL]/api/AgsyncAuth Setup Azure Keyvault Create an application ID for the integration framework to authenticate to D365 CRM Create an application user in D365 CRM and assign the proper role(s) Create an Azure Service bus topic Create a subscription on the topic above","title":"Setup"},{"location":"Agsync/#configuration","text":"In the appsettings.json you will need to define the SourceConfig and TargetConfig nodes as follows:","title":"Configuration"},{"location":"CDSConfig/","text":"","title":"CDSConfig"},{"location":"CRM-configuration/","text":"Configuration Setup CRM To begin configuration setup in CRM, first import LevCore Solution followed by importing Agronomy Solution. Migrate the ESG Configuration data using the Configuration Migration Tool. This tool can be downloaded at https://docs.microsoft.com/en-us/dynamics365/customer-engagement/developer/download-tools-nuget Ensure an Application User has been created with admin security roles assigned. If integrating records from CRM to AX, you will need to create steps on the service endpoint using the Plugin Registration tool. Steps will also need to be created on plugins which require the pricing service. The configuration will look like this: { \"clientappid\": \"da7c3de3-5555-49ab-8465-d01e8cd22e58\", \"clientappsecret\": \"dradgg38ddszLzgqbcZ3/8sG2FbC/BSWxnCtXzJsWP8=\", \"tenant\": \"https://login.microsoftonline.com/5555a5b1-fbt8-465b-ad9d-21e21129e610/oauth2/token\", \"uristring\": \"https://environment22c2251c662a7e541devaos.cloudax.dynamics.com/api/services/LevPricingServices/PricingService/getPricing\", \"resource\": \"https:// environment22c2251c662a7e541devaos.cloudax.dynamics.com\", \"username\": \"John.smith@email.com\", \"password\": \"plaintextpassword\" } Setup the data through integrations, create it in CRM, or import data packets. Entities in pink must be set up in CRM. Entities in yellow will integrate over from FinOps. Entities in green will integrate from Agsync. Once item categories have been either created or imported in, the filtered xmls on the Plans and Batch Plans will need to be updated to reflect the item category GUIDs within your environment. The Proposal OOB Proposal line Subgrids will also require filter updates to reflect the Item Category's in your environment.","title":"CRM Platform Configuration"},{"location":"CRM-configuration/#configuration-setup-crm","text":"To begin configuration setup in CRM, first import LevCore Solution followed by importing Agronomy Solution. Migrate the ESG Configuration data using the Configuration Migration Tool. This tool can be downloaded at https://docs.microsoft.com/en-us/dynamics365/customer-engagement/developer/download-tools-nuget Ensure an Application User has been created with admin security roles assigned. If integrating records from CRM to AX, you will need to create steps on the service endpoint using the Plugin Registration tool. Steps will also need to be created on plugins which require the pricing service. The configuration will look like this: { \"clientappid\": \"da7c3de3-5555-49ab-8465-d01e8cd22e58\", \"clientappsecret\": \"dradgg38ddszLzgqbcZ3/8sG2FbC/BSWxnCtXzJsWP8=\", \"tenant\": \"https://login.microsoftonline.com/5555a5b1-fbt8-465b-ad9d-21e21129e610/oauth2/token\", \"uristring\": \"https://environment22c2251c662a7e541devaos.cloudax.dynamics.com/api/services/LevPricingServices/PricingService/getPricing\", \"resource\": \"https:// environment22c2251c662a7e541devaos.cloudax.dynamics.com\", \"username\": \"John.smith@email.com\", \"password\": \"plaintextpassword\" } Setup the data through integrations, create it in CRM, or import data packets. Entities in pink must be set up in CRM. Entities in yellow will integrate over from FinOps. Entities in green will integrate from Agsync. Once item categories have been either created or imported in, the filtered xmls on the Plans and Batch Plans will need to be updated to reflect the item category GUIDs within your environment. The Proposal OOB Proposal line Subgrids will also require filter updates to reflect the Item Category's in your environment.","title":"Configuration Setup CRM"},{"location":"CommandLineParameters/","text":"Introduction Brief introduction of the module, component or feature being documented. This document explains ... Overview Main Point 1 Sub Point 1.1","title":"Introduction"},{"location":"CommandLineParameters/#introduction","text":"Brief introduction of the module, component or feature being documented. This document explains ...","title":"Introduction"},{"location":"CommandLineParameters/#overview","text":"","title":"Overview"},{"location":"CommandLineParameters/#main-point-1","text":"","title":"Main Point 1"},{"location":"CommandLineParameters/#sub-point-11","text":"","title":"Sub Point 1.1"},{"location":"Commodities/","text":"Introduction Brief introduction of the module, component or feature being documented. This document explains ... Overview Main Point 1 Sub Point 1.1","title":"Levridge Commodities"},{"location":"Commodities/#introduction","text":"Brief introduction of the module, component or feature being documented. This document explains ...","title":"Introduction"},{"location":"Commodities/#overview","text":"","title":"Overview"},{"location":"Commodities/#main-point-1","text":"","title":"Main Point 1"},{"location":"Commodities/#sub-point-11","text":"","title":"Sub Point 1.1"},{"location":"Configuring-Levridge-Entity-Event-Endpoint/","text":"Introduction Brief introduction of the module, component or feature being documented. This document explains ... Overview Main Point 1 Sub Point 1.1","title":"Introduction"},{"location":"Configuring-Levridge-Entity-Event-Endpoint/#introduction","text":"Brief introduction of the module, component or feature being documented. This document explains ...","title":"Introduction"},{"location":"Configuring-Levridge-Entity-Event-Endpoint/#overview","text":"","title":"Overview"},{"location":"Configuring-Levridge-Entity-Event-Endpoint/#main-point-1","text":"","title":"Main Point 1"},{"location":"Configuring-Levridge-Entity-Event-Endpoint/#sub-point-11","text":"","title":"Sub Point 1.1"},{"location":"Configuring-Levridge-Entity-Events/","text":"Introduction Brief introduction of the module, component or feature being documented. This document explains ... Overview Main Point 1 Sub Point 1.1","title":"Introduction"},{"location":"Configuring-Levridge-Entity-Events/#introduction","text":"Brief introduction of the module, component or feature being documented. This document explains ...","title":"Introduction"},{"location":"Configuring-Levridge-Entity-Events/#overview","text":"","title":"Overview"},{"location":"Configuring-Levridge-Entity-Events/#main-point-1","text":"","title":"Main Point 1"},{"location":"Configuring-Levridge-Entity-Events/#sub-point-11","text":"","title":"Sub Point 1.1"},{"location":"D365-CRM-to-D365-F&O/","text":"D365 CRM to D365 F&O Setup To integrate from D365 CRM to D365 F&O you will need to: - Configure Azure Service Bus Endpoint in CRM - Configure Azure Service Bus plug-in on the appropriate entities - Create an application ID for the integration framework to authenticate to D365 F&O - Create an Azure Active Directory Application in D365 F&O - Create an Azure Service bus topic - Create a subscription on the topic above Note: Because CRM does not support sending messages to topics with subscriptions that require sessions, it is important to make sure that the subscription is created without enabling sessions. In order to support message ordering without the use of sessions the TopicDescription.SupportOrdering property must be set to true on the topic. You will need to use the service bus explorer to set this. Configuration In the appsettings.json you will need to define the SourceConfig and TargetConfig nodes as follows: \"SourceConfig\": { \"ServiceBusConfigName\": [section name with service bus topic], \"ODataConfigName\": [section name with CRM data configuration], \"SystemName\": \"DynamicsCRM\", \"Direction\": \"Source\" }, \"TargetConfig\": { \"ODataConfigName\": [section name with F&O data configuration], \"CDSConfigName\": [section name with CDS data configuration], \"SystemName\": \"DynamicsAX\", \"Direction\": \"Target\" }","title":"D365 CRM to D365 F&O"},{"location":"D365-CRM-to-D365-F&O/#d365-crm-to-d365-fo","text":"","title":"D365 CRM to D365 F&amp;O"},{"location":"D365-CRM-to-D365-F&O/#setup","text":"To integrate from D365 CRM to D365 F&O you will need to: - Configure Azure Service Bus Endpoint in CRM - Configure Azure Service Bus plug-in on the appropriate entities - Create an application ID for the integration framework to authenticate to D365 F&O - Create an Azure Active Directory Application in D365 F&O - Create an Azure Service bus topic - Create a subscription on the topic above Note: Because CRM does not support sending messages to topics with subscriptions that require sessions, it is important to make sure that the subscription is created without enabling sessions. In order to support message ordering without the use of sessions the TopicDescription.SupportOrdering property must be set to true on the topic. You will need to use the service bus explorer to set this.","title":"Setup"},{"location":"D365-CRM-to-D365-F&O/#configuration","text":"In the appsettings.json you will need to define the SourceConfig and TargetConfig nodes as follows: \"SourceConfig\": { \"ServiceBusConfigName\": [section name with service bus topic], \"ODataConfigName\": [section name with CRM data configuration], \"SystemName\": \"DynamicsCRM\", \"Direction\": \"Source\" }, \"TargetConfig\": { \"ODataConfigName\": [section name with F&O data configuration], \"CDSConfigName\": [section name with CDS data configuration], \"SystemName\": \"DynamicsAX\", \"Direction\": \"Target\" }","title":"Configuration"},{"location":"D365-F&O-to-D365-CRM/","text":"D365 F&O to D365 CRM Setup To integrate from D365 F&O to D365 CRM you will need to: - Configure Event Endpoint in F&O - configure Levridge Entity Events - Create an application ID for the integration framework to authenticate to D365 CRM - Create an application user in D365 CRM and assign the proper role(s) - Create an Azure Service bus topic - Create a subscription on the topic above Configuration In the appsettings.json you will need to define the SourceConfig and TargetConfig nodes as follows: \"SourceConfig\": { \"ServiceBusConfigName\": [section name with service bus topic], \"ODataConfigName\": [section name with F&O data configuration], \"SystemName\": \"DynamicsAX\", \"Direction\": \"Source\" }, \"TargetConfig\": { \"ODataConfigName\": [section name with CRM data configuration], \"CDSConfigName\": [section name with CDS data configuration], \"SystemName\": \"DynamicsCRM\", \"Direction\": \"Target\" }","title":"D365 F&O to D365 CRM"},{"location":"D365-F&O-to-D365-CRM/#d365-fo-to-d365-crm","text":"","title":"D365 F&amp;O to D365 CRM"},{"location":"D365-F&O-to-D365-CRM/#setup","text":"To integrate from D365 F&O to D365 CRM you will need to: - Configure Event Endpoint in F&O - configure Levridge Entity Events - Create an application ID for the integration framework to authenticate to D365 CRM - Create an application user in D365 CRM and assign the proper role(s) - Create an Azure Service bus topic - Create a subscription on the topic above","title":"Setup"},{"location":"D365-F&O-to-D365-CRM/#configuration","text":"In the appsettings.json you will need to define the SourceConfig and TargetConfig nodes as follows: \"SourceConfig\": { \"ServiceBusConfigName\": [section name with service bus topic], \"ODataConfigName\": [section name with F&O data configuration], \"SystemName\": \"DynamicsAX\", \"Direction\": \"Source\" }, \"TargetConfig\": { \"ODataConfigName\": [section name with CRM data configuration], \"CDSConfigName\": [section name with CDS data configuration], \"SystemName\": \"DynamicsCRM\", \"Direction\": \"Target\" }","title":"Configuration"},{"location":"Deploy-Integration-As-A-Service/","text":"Introduction This webhost application can be run in three modes: As a web application (in Azure or IIS) As a console application As a service Run as a service To run as a service it must be installed. To install as a service you must get the code and place it in the folder from which you want the service to run. The simplest way to get the code is to get the zip file from the latest build. Here are some instructsion for getting the latest code. Get the zip file and unzip it into the folder from which you want the service to run. Deployed with the code should bethree powershell scripts: InstallService.ps1 - this script will install the service InstallEventSource.ps1 - this script will install an event source on the Application EventLog on the local machine RemoveService.ps1 - this script will uninstall / remove the service InstallService.ps1 This script installs a service and sets it to automatically run on startup. It accepts the following command line parameters: PublishPath - the path to the folder from which you want the service to run ServiceUser - user account under which the service will run (default = $env:computername+\"\\IntegrationHost\") ServiceName - the name of the service (default = \"Levridge.Integration.Host\") ServiceDescription - the description for the service (default = \"Levridge Integration Host Service\") ServiceDisplayName - the display name for the service (default = \"Levridge Integration Host\") SourceName - the source name under which EventLog entries should be logged (default = $ServiceName) This script will also execute the InstallEventSource.ps1 InstallEventSource.ps1 This script will install the specified EventLog source. It accepts the following command line parameter: SourceName - the source name under which EventLog entries should be logged (default = \"Levridge.Integration.Host\") RemoveService.ps1 This script will remove the specified service. It accepts the following command line parameter: ServiceName Command line parameters This application can be run with the following command line parameters: debug (-d) - This will cause the application to wait for a debugger to be attached before it continues. This can be helpful to debug startup issues for services or web applications. service (-s) - This will cause the application to run as a service (if the debugger is not attached). SourceName (sn) - This will cause the application to use the specified source name for the application EventLog Source Name. If no source name is specified, the default application source name is use.","title":"Introduction"},{"location":"Deploy-Integration-As-A-Service/#introduction","text":"This webhost application can be run in three modes: As a web application (in Azure or IIS) As a console application As a service","title":"Introduction"},{"location":"Deploy-Integration-As-A-Service/#run-as-a-service","text":"To run as a service it must be installed. To install as a service you must get the code and place it in the folder from which you want the service to run. The simplest way to get the code is to get the zip file from the latest build. Here are some instructsion for getting the latest code. Get the zip file and unzip it into the folder from which you want the service to run. Deployed with the code should bethree powershell scripts: InstallService.ps1 - this script will install the service InstallEventSource.ps1 - this script will install an event source on the Application EventLog on the local machine RemoveService.ps1 - this script will uninstall / remove the service","title":"Run as a service"},{"location":"Deploy-Integration-As-A-Service/#installserviceps1","text":"This script installs a service and sets it to automatically run on startup. It accepts the following command line parameters: PublishPath - the path to the folder from which you want the service to run ServiceUser - user account under which the service will run (default = $env:computername+\"\\IntegrationHost\") ServiceName - the name of the service (default = \"Levridge.Integration.Host\") ServiceDescription - the description for the service (default = \"Levridge Integration Host Service\") ServiceDisplayName - the display name for the service (default = \"Levridge Integration Host\") SourceName - the source name under which EventLog entries should be logged (default = $ServiceName) This script will also execute the InstallEventSource.ps1","title":"InstallService.ps1"},{"location":"Deploy-Integration-As-A-Service/#installeventsourceps1","text":"This script will install the specified EventLog source. It accepts the following command line parameter: SourceName - the source name under which EventLog entries should be logged (default = \"Levridge.Integration.Host\")","title":"InstallEventSource.ps1"},{"location":"Deploy-Integration-As-A-Service/#removeserviceps1","text":"This script will remove the specified service. It accepts the following command line parameter: ServiceName","title":"RemoveService.ps1"},{"location":"Deploy-Integration-As-A-Service/#command-line-parameters","text":"This application can be run with the following command line parameters: debug (-d) - This will cause the application to wait for a debugger to be attached before it continues. This can be helpful to debug startup issues for services or web applications. service (-s) - This will cause the application to run as a service (if the debugger is not attached). SourceName (sn) - This will cause the application to use the specified source name for the application EventLog Source Name. If no source name is specified, the default application source name is use.","title":"Command line parameters"},{"location":"Deploy-Integration-Framework-as-Zip-File/","text":"Deploy Integration Framework as a Zip File At Levridge we build the Integration Framework every night. The output of the build is stored at \\\\devvmhost\\releases . Each build has two folders, \"Integration Framework Main\" and \"Levridge Main\". The integration framework is in the \"drop\" sub-folder of \"Integration Framework Main\". The entire integration framework is contained in the Levridge.Integration.Host.zip file. To deploy the build: Open a browser and navigate to https://<App Service Name>.scm.azurewebsites.net/ZipDeployUI example: https://levdevag.scm.azurewebsites.net/ZipDeployUI From the \"Integration Main\\drop\" folder drag the Levridge.Integration.Host.zip and drop it on the file explorer area on the web page. When deployment is in progress, an icon in the top right corner shows you the progress in percentage. The page also shows verbose messages for the operation below the explorer area. When it is finished, the last deployment message should say \"Deployment successful\". Because this will overwrite the appsettings.json you will need to updated the settings to your desired configuration. Resources Microsoft documentation","title":"Deploy Integration Framework as Zip File"},{"location":"Deploy-Integration-Framework-as-Zip-File/#deploy-integration-framework-as-a-zip-file","text":"At Levridge we build the Integration Framework every night. The output of the build is stored at \\\\devvmhost\\releases . Each build has two folders, \"Integration Framework Main\" and \"Levridge Main\". The integration framework is in the \"drop\" sub-folder of \"Integration Framework Main\". The entire integration framework is contained in the Levridge.Integration.Host.zip file. To deploy the build: Open a browser and navigate to https://<App Service Name>.scm.azurewebsites.net/ZipDeployUI example: https://levdevag.scm.azurewebsites.net/ZipDeployUI From the \"Integration Main\\drop\" folder drag the Levridge.Integration.Host.zip and drop it on the file explorer area on the web page. When deployment is in progress, an icon in the top right corner shows you the progress in percentage. The page also shows verbose messages for the operation below the explorer area. When it is finished, the last deployment message should say \"Deployment successful\". Because this will overwrite the appsettings.json you will need to updated the settings to your desired configuration.","title":"Deploy Integration Framework as a Zip File"},{"location":"Deploy-Integration-Framework-as-Zip-File/#resources","text":"Microsoft documentation","title":"Resources"},{"location":"Deploying-Integration-Framework/","text":"Deploying the Integration Framework There are several ways to deploy the integration framework. Since the framework is a standard Azure Application Service we can use any of the deployment options available. The simplest deployment is to deploy a zip file . Select one of the following options for more information on Deploying to Azure: Deploy as Zip file Deploy via FTP Deploy with Script The Integration Framework can also be deployed as a Windows Service .","title":"Deploying the Integration Framework"},{"location":"Deploying-Integration-Framework/#deploying-the-integration-framework","text":"There are several ways to deploy the integration framework. Since the framework is a standard Azure Application Service we can use any of the deployment options available. The simplest deployment is to deploy a zip file . Select one of the following options for more information on Deploying to Azure: Deploy as Zip file Deploy via FTP Deploy with Script The Integration Framework can also be deployed as a Windows Service .","title":"Deploying the Integration Framework"},{"location":"DeployingCDS/","text":"Introduction the Levridge Integration Framework uses the CDS repository to store reference data. Because CDS licenses are included with every Dynamics 365 user, this should not result in an additional licensing fees to our customers. This document explains the steps necessary to deploy CDS to a customer environment. Deployment Overview The following steps are necessary to deploy the CDS solutions and data to customer. Create the CDS Environment Create the CDS Database Set Data Loss Prevention policies Configure database security Deploy Solution Deploy Applications Setup Users Import Data","title":"Deploying CDS"},{"location":"DeployingCDS/#introduction","text":"the Levridge Integration Framework uses the CDS repository to store reference data. Because CDS licenses are included with every Dynamics 365 user, this should not result in an additional licensing fees to our customers. This document explains the steps necessary to deploy CDS to a customer environment.","title":"Introduction"},{"location":"DeployingCDS/#deployment","text":"","title":"Deployment"},{"location":"DeployingCDS/#overview","text":"The following steps are necessary to deploy the CDS solutions and data to customer. Create the CDS Environment Create the CDS Database Set Data Loss Prevention policies Configure database security Deploy Solution Deploy Applications Setup Users Import Data","title":"Overview"},{"location":"Equity/","text":"Introduction Brief introduction of the module, component or feature being documented. This document explains ... Overview Main Point 1 Sub Point 1.1","title":"Levridge Equity Accounting"},{"location":"Equity/#introduction","text":"Brief introduction of the module, component or feature being documented. This document explains ...","title":"Introduction"},{"location":"Equity/#overview","text":"","title":"Overview"},{"location":"Equity/#main-point-1","text":"","title":"Main Point 1"},{"location":"Equity/#sub-point-11","text":"","title":"Sub Point 1.1"},{"location":"Feed/","text":"Introduction Brief introduction of the module, component or feature being documented. This document explains ... Overview Main Point 1 Sub Point 1.1","title":"Levridge Feed"},{"location":"Feed/#introduction","text":"Brief introduction of the module, component or feature being documented. This document explains ...","title":"Introduction"},{"location":"Feed/#overview","text":"","title":"Overview"},{"location":"Feed/#main-point-1","text":"","title":"Main Point 1"},{"location":"Feed/#sub-point-11","text":"","title":"Sub Point 1.1"},{"location":"Field-Reveal/","text":"Field Reveal","title":"Field Reveal"},{"location":"Field-Reveal/#field-reveal","text":"","title":"Field Reveal"},{"location":"Integration-Overview/","text":"Introduction The Levridge integration framework provides integration between Dynamics365 Finance and Operations and Dynamics 365 Customer Engagement and 3rd party applications. This document provides and overview of the integration framework and links to the document that exists for the framework. Overview The Levridge Integration Framework is an entity syncronization framework. It provides a means to synchronize data at an entity level between multiple data sources. All integrations that use the framework follow the same pattern: 1. A data source has an integration event 2. The data source responds to the integration event by sending one or more entities to the service bus. 3. The service bus publishes the message(s) to each subscription 4. An instance of the integration framework receives the message(s) from a subscription 5. The integration framework transforms the message it if needed 6. The integration framework sends the message to the target data source Integrations Currently we support the following integrations: D365 F&O to D365 CRM D365 CRM to D365 F&O Levridge Scale House Agsync Kahler Surety oneWeigh Field Reveal Levridge CRM Remote Printing Service","title":"Overview"},{"location":"Integration-Overview/#introduction","text":"The Levridge integration framework provides integration between Dynamics365 Finance and Operations and Dynamics 365 Customer Engagement and 3rd party applications. This document provides and overview of the integration framework and links to the document that exists for the framework.","title":"Introduction"},{"location":"Integration-Overview/#overview","text":"The Levridge Integration Framework is an entity syncronization framework. It provides a means to synchronize data at an entity level between multiple data sources. All integrations that use the framework follow the same pattern: 1. A data source has an integration event 2. The data source responds to the integration event by sending one or more entities to the service bus. 3. The service bus publishes the message(s) to each subscription 4. An instance of the integration framework receives the message(s) from a subscription 5. The integration framework transforms the message it if needed 6. The integration framework sends the message to the target data source","title":"Overview"},{"location":"Integration-Overview/#integrations","text":"Currently we support the following integrations: D365 F&O to D365 CRM D365 CRM to D365 F&O Levridge Scale House Agsync Kahler Surety oneWeigh Field Reveal Levridge CRM Remote Printing Service","title":"Integrations"},{"location":"Kahler/","text":"Kahler The Kahler integration is a bidirectional integration that consists of a Topic for Dispensing Work Orders that go from D365 F&O to Kahler and Dispensing Work Records that go from Kahler to D365 F&O. This means there are two instances of the integration running to handle the entire integration. One aspect of Kahler that is different from other integrations is the D365 F&O to Kahler instance must run on premise because the Kahler system runs behind the firewall. This should be deployed as a service. Another aspect that is different is that each location should only get the messages from the topic that apply to that location. This is done with a filter on the service bus topic subscription. In order for the filter to work the Levridge Entity Event must be configured to expose the branch property on the message. Setup To integrate to and from Kahler and D365 F&O you will need to: Configure Event Endpoint in F&O Configure Levridge Entity Events You will need to be sure to provide properties on the event to allow filtering by Branch Create an application ID for the integration framework to authenticate to D365 F&O Create an Azure Active Directory Application in D365 F&O Create an Azure Service bus topic for Dispensing Work Orders (D365 F&O to Kahler) Create an Azure Service bus topic for Dispensing Work Records (Kahler to D365 F&O) Create a subscription on the Dispensing Work Order topic for each Branch that has a Kahler mixer Create a filter on the subscription for each Branch Create a subscription on the Dispensing Work Record topic for integration back to F&O Deploy the Levridge Integration Framework as a service at each Branch that has a Kahler mixer Configuration for Kahler on Premise This configuration will need to be on premise with the Kahler mixer. The on-premise instance will handle the Dispensing Work Order from D365 F&O to Kahler and the Webhook that receives Dispensing Work Records from Kahler. In the appsettings.json you will need to define the SourceConfig and TargetConfig nodes as follows: \"Controllers\": { \"HostController\": \"Levridge.Integration.Host.DefaultController\", \"KahlerConroller\": \"Levridge.Integration.Host.KahlerController\" }, \"SourceConfig\": { \"ServiceBusConfigName\": \"Dispensing Work Order\", //[section name with Dispensing Work Order service bus topic] \"ODataConfigName\": \"DynamicsAX\", //[section name with F&O data configuration] \"SystemName\": \"DynamicsAX\", \"Direction\": \"Source\" }, \"TargetConfig\": { \"ODataConfigName\": \"Kahler End Point\", //[section name with Kahler data configuration], \"CDSConfigName\": [section name with CDS data configuration], \"SystemName\": \"Kahler\", \"Direction\": \"Target\" }, \"DynamicsAX\": { \"UriString\": [URL to D365 F&O], \"ActiveDirectoryResource\": [URL to D365 F&O], \"ActiveDirectoryTenant\": \"https://login.microsoftonline.com/[Customer_Tenant_ID]\", \"ActiveDirectoryClientAppId\": [Application ID used to register the application in AD], \"ActiveDirectoryClientAppSecret\": [Client Secret generated for the Application ID in AD], \"ODataEntityPath\": \"[URL to D365 F&O]/data/\" }, \"Kahler End Point\": { \"UriString\": [URL to Local Kahler] }, \"Dispensing Work Order\": { \"ConnectionString\": [connection string to Dispensing Work Order Topic], \"TopicName\": [Dispensing Work Order Topic Name], \"SubscriptionName\": [Subscription Name for the Branch], \"RequiresSession\": true }, \"Levridge.Integration.Host.KahlerController\": { \"ConnectionString\": [connection string to Dispensing Work Record Topic], \"TopicName\": [Dispensing Work Record Topic Name], \"RequiresSession\": true } Controllers This section contains a list of controllers that will be loaded by the current instance. In addition to the default controller that we always want to load, we want the system to load the Kahler controller. The names (on the left) are not significant and are used only for debugging. The values (on the right) are significant. It must be the name of the assembly that should be loaded for the controller. SourceConfig The source config will represent the data being send from D365 F&O. Currently, the Dispensing Work Order is the only entity sent from F&O. In the future the topic may also include master data that is sent to Kahler. The ODataConfigName is not currently being used but is a required value. So point it to the section that contains the connection information to D365 F&O. TargetConfig The target config will represent the data endpoint for the local Kahler mixer. The \"ODataConfigName\" should point to a section that contains the Kahler REST endpoint. Levridge.Integration.Host.KahlerController This section is used by the Kahler controller to be able to send messages to the proper topic to be handled by the integration framework and written to D365 F&O Configuration for Kahler in Azure This instance can be a single instance running in the cloud. This instance will handle the Dispensing Work Record from Kahler to D365 F&O In the appsettings.json you will need to define the SourceConfig and TargetConfig nodes as follows: \"SourceConfig\": { \"ServiceBusConfigName\": \"Dispensing Work Record\", //[section name with Dispensing Work Record service bus topic] \"SystemName\": \"Kahler\", \"Direction\": \"Source\" }, \"TargetConfig\": { \"ODataConfigName\": \"DynamicsAX\", //[section name with F&O data configuration] \"SystemName\": \"DynamicsAX\", \"Direction\": \"Target\" }, \"DynamicsAX\": { \"UriString\": [URL to D365 F&O], \"ActiveDirectoryResource\": [URL to D365 F&O], \"ActiveDirectoryTenant\": \"https://login.microsoftonline.com/[Customer_Tenant_ID]\", \"ActiveDirectoryClientAppId\": [Application ID used to register the application in AD], \"ActiveDirectoryClientAppSecret\": [Client Secret generated for the Application ID in AD], \"ODataEntityPath\": \"[URL to D365 F&O]/data/\" }, \"Dispensing Work Record\": { \"ConnectionString\": [connection string to Dispensing Work Record Topic], \"TopicName\": [Dispensing Work Record Topic Name], \"SubscriptionName\": [Subscription Name for Integration to D365 F&O], \"RequiresSession\": true }","title":"Kahler"},{"location":"Kahler/#kahler","text":"The Kahler integration is a bidirectional integration that consists of a Topic for Dispensing Work Orders that go from D365 F&O to Kahler and Dispensing Work Records that go from Kahler to D365 F&O. This means there are two instances of the integration running to handle the entire integration. One aspect of Kahler that is different from other integrations is the D365 F&O to Kahler instance must run on premise because the Kahler system runs behind the firewall. This should be deployed as a service. Another aspect that is different is that each location should only get the messages from the topic that apply to that location. This is done with a filter on the service bus topic subscription. In order for the filter to work the Levridge Entity Event must be configured to expose the branch property on the message.","title":"Kahler"},{"location":"Kahler/#setup","text":"To integrate to and from Kahler and D365 F&O you will need to: Configure Event Endpoint in F&O Configure Levridge Entity Events You will need to be sure to provide properties on the event to allow filtering by Branch Create an application ID for the integration framework to authenticate to D365 F&O Create an Azure Active Directory Application in D365 F&O Create an Azure Service bus topic for Dispensing Work Orders (D365 F&O to Kahler) Create an Azure Service bus topic for Dispensing Work Records (Kahler to D365 F&O) Create a subscription on the Dispensing Work Order topic for each Branch that has a Kahler mixer Create a filter on the subscription for each Branch Create a subscription on the Dispensing Work Record topic for integration back to F&O Deploy the Levridge Integration Framework as a service at each Branch that has a Kahler mixer","title":"Setup"},{"location":"Kahler/#configuration-for-kahler-on-premise","text":"This configuration will need to be on premise with the Kahler mixer. The on-premise instance will handle the Dispensing Work Order from D365 F&O to Kahler and the Webhook that receives Dispensing Work Records from Kahler. In the appsettings.json you will need to define the SourceConfig and TargetConfig nodes as follows: \"Controllers\": { \"HostController\": \"Levridge.Integration.Host.DefaultController\", \"KahlerConroller\": \"Levridge.Integration.Host.KahlerController\" }, \"SourceConfig\": { \"ServiceBusConfigName\": \"Dispensing Work Order\", //[section name with Dispensing Work Order service bus topic] \"ODataConfigName\": \"DynamicsAX\", //[section name with F&O data configuration] \"SystemName\": \"DynamicsAX\", \"Direction\": \"Source\" }, \"TargetConfig\": { \"ODataConfigName\": \"Kahler End Point\", //[section name with Kahler data configuration], \"CDSConfigName\": [section name with CDS data configuration], \"SystemName\": \"Kahler\", \"Direction\": \"Target\" }, \"DynamicsAX\": { \"UriString\": [URL to D365 F&O], \"ActiveDirectoryResource\": [URL to D365 F&O], \"ActiveDirectoryTenant\": \"https://login.microsoftonline.com/[Customer_Tenant_ID]\", \"ActiveDirectoryClientAppId\": [Application ID used to register the application in AD], \"ActiveDirectoryClientAppSecret\": [Client Secret generated for the Application ID in AD], \"ODataEntityPath\": \"[URL to D365 F&O]/data/\" }, \"Kahler End Point\": { \"UriString\": [URL to Local Kahler] }, \"Dispensing Work Order\": { \"ConnectionString\": [connection string to Dispensing Work Order Topic], \"TopicName\": [Dispensing Work Order Topic Name], \"SubscriptionName\": [Subscription Name for the Branch], \"RequiresSession\": true }, \"Levridge.Integration.Host.KahlerController\": { \"ConnectionString\": [connection string to Dispensing Work Record Topic], \"TopicName\": [Dispensing Work Record Topic Name], \"RequiresSession\": true }","title":"Configuration for Kahler on Premise"},{"location":"Kahler/#controllers","text":"This section contains a list of controllers that will be loaded by the current instance. In addition to the default controller that we always want to load, we want the system to load the Kahler controller. The names (on the left) are not significant and are used only for debugging. The values (on the right) are significant. It must be the name of the assembly that should be loaded for the controller.","title":"Controllers"},{"location":"Kahler/#sourceconfig","text":"The source config will represent the data being send from D365 F&O. Currently, the Dispensing Work Order is the only entity sent from F&O. In the future the topic may also include master data that is sent to Kahler. The ODataConfigName is not currently being used but is a required value. So point it to the section that contains the connection information to D365 F&O.","title":"SourceConfig"},{"location":"Kahler/#targetconfig","text":"The target config will represent the data endpoint for the local Kahler mixer. The \"ODataConfigName\" should point to a section that contains the Kahler REST endpoint.","title":"TargetConfig"},{"location":"Kahler/#levridgeintegrationhostkahlercontroller","text":"This section is used by the Kahler controller to be able to send messages to the proper topic to be handled by the integration framework and written to D365 F&O","title":"Levridge.Integration.Host.KahlerController"},{"location":"Kahler/#configuration-for-kahler-in-azure","text":"This instance can be a single instance running in the cloud. This instance will handle the Dispensing Work Record from Kahler to D365 F&O In the appsettings.json you will need to define the SourceConfig and TargetConfig nodes as follows: \"SourceConfig\": { \"ServiceBusConfigName\": \"Dispensing Work Record\", //[section name with Dispensing Work Record service bus topic] \"SystemName\": \"Kahler\", \"Direction\": \"Source\" }, \"TargetConfig\": { \"ODataConfigName\": \"DynamicsAX\", //[section name with F&O data configuration] \"SystemName\": \"DynamicsAX\", \"Direction\": \"Target\" }, \"DynamicsAX\": { \"UriString\": [URL to D365 F&O], \"ActiveDirectoryResource\": [URL to D365 F&O], \"ActiveDirectoryTenant\": \"https://login.microsoftonline.com/[Customer_Tenant_ID]\", \"ActiveDirectoryClientAppId\": [Application ID used to register the application in AD], \"ActiveDirectoryClientAppSecret\": [Client Secret generated for the Application ID in AD], \"ODataEntityPath\": \"[URL to D365 F&O]/data/\" }, \"Dispensing Work Record\": { \"ConnectionString\": [connection string to Dispensing Work Record Topic], \"TopicName\": [Dispensing Work Record Topic Name], \"SubscriptionName\": [Subscription Name for Integration to D365 F&O], \"RequiresSession\": true }","title":"Configuration for Kahler in Azure"},{"location":"Levridge-CRM-Remote-Printing-Service/","text":"","title":"Levridge CRM Remote Printing Service"},{"location":"ODataConfig/","text":"Introduction SourceConfig is an object in the appsettings.json file used by the Levridge Integration Framework to define the configuration for the Source of an integration interaction. Example \"SourceConfig\": { \"ServiceBusConfigName\": \"Levridge.Integration.Host.SuretyController\", \"ODataConfigName\": \"DynamicsCRM\", \"SystemName\": \"Surety\", \"Direction\": \"Source\" } Definition SourceConfig The node in the appsettings.json file does not actually need to be named \"SourceConfig\". You can use a command line parameter to specify the node name (section name) that contains the SourceConfig data. No matter the name, the source config section must contain the following attributes: - ServiceBusConfigName - ODataConfigName - SystemName - Direction ServiceBusConfigName The ServiceBusConfigName attribute contains a string that specifies the configuration node (section) that holds the service bus configuration used by the Source of the Integration Interaction. This must point to a node that is a ServiceBusConfig json object ODataConfigName SystemName Direction","title":"Introduction"},{"location":"ODataConfig/#introduction","text":"SourceConfig is an object in the appsettings.json file used by the Levridge Integration Framework to define the configuration for the Source of an integration interaction.","title":"Introduction"},{"location":"ODataConfig/#example","text":"\"SourceConfig\": { \"ServiceBusConfigName\": \"Levridge.Integration.Host.SuretyController\", \"ODataConfigName\": \"DynamicsCRM\", \"SystemName\": \"Surety\", \"Direction\": \"Source\" }","title":"Example"},{"location":"ODataConfig/#definition","text":"","title":"Definition"},{"location":"ODataConfig/#sourceconfig","text":"The node in the appsettings.json file does not actually need to be named \"SourceConfig\". You can use a command line parameter to specify the node name (section name) that contains the SourceConfig data. No matter the name, the source config section must contain the following attributes: - ServiceBusConfigName - ODataConfigName - SystemName - Direction","title":"SourceConfig"},{"location":"ODataConfig/#servicebusconfigname","text":"The ServiceBusConfigName attribute contains a string that specifies the configuration node (section) that holds the service bus configuration used by the Source of the Integration Interaction. This must point to a node that is a ServiceBusConfig json object","title":"ServiceBusConfigName"},{"location":"ODataConfig/#odataconfigname","text":"","title":"ODataConfigName"},{"location":"ODataConfig/#systemname","text":"","title":"SystemName"},{"location":"ODataConfig/#direction","text":"","title":"Direction"},{"location":"PreparingCDSForDeployment/","text":"Introduction The Levridge Integration Framework uses the CDS repository to store reference data. We need to provide deployment packages that include solutions, applications and data that can be used to deploy the CDS components to the customer. This document explains the steps necessary to package CDS for deployment to a customer environment. Overview The steps necessary to prepare the CDS components for deployment are: 1. Create the Solution 2. Create the application packages 3. Create the export schemas 4. Export the data 5. Check assets into source control Create Solution Create Application Packages Create Export Schemas Export Data Check-In Assets","title":"Introduction"},{"location":"PreparingCDSForDeployment/#introduction","text":"The Levridge Integration Framework uses the CDS repository to store reference data. We need to provide deployment packages that include solutions, applications and data that can be used to deploy the CDS components to the customer. This document explains the steps necessary to package CDS for deployment to a customer environment.","title":"Introduction"},{"location":"PreparingCDSForDeployment/#overview","text":"The steps necessary to prepare the CDS components for deployment are: 1. Create the Solution 2. Create the application packages 3. Create the export schemas 4. Export the data 5. Check assets into source control","title":"Overview"},{"location":"PreparingCDSForDeployment/#create-solution","text":"","title":"Create Solution"},{"location":"PreparingCDSForDeployment/#create-application-packages","text":"","title":"Create Application Packages"},{"location":"PreparingCDSForDeployment/#create-export-schemas","text":"","title":"Create Export Schemas"},{"location":"PreparingCDSForDeployment/#export-data","text":"","title":"Export Data"},{"location":"PreparingCDSForDeployment/#check-in-assets","text":"","title":"Check-In Assets"},{"location":"ReadMe (2)/","text":"Introduction The Levridge integration framework provides integration between Dynamics365 Finance and Operations and Dynamics 365 Customer Engagement and 3rd party applications. This document provides and overview of the integration framework and links to the document that exists for the framework. Overview The Levridge Integration Framework is an entity syncronization framework. It provides a means to synchronize data at an entity level between multiple data sources. All integrations that use the framework follow the same pattern: 1. A data source has an integration event 2. The data source responds to the integration event by sending one or more entities to the service bus. 3. The service bus publishes the message(s) to each subscription 4. An instance of the integration framework receives the message(s) from a subscription 5. The integration framework transforms the message it if needed 6. The integration framework sends the message to the target data source Integrations Currently we support the following integrations: - D365 F&O to D365 CRM - D365 CRM to D365 F&O - Kahler - Agsync - oneWeigh - Field Reveal - Surety - Levridge Scale House D365 F&O to D365 CRM Setup To integrate from D365 F&O to D365 CRM you will need to: - configure Levridge Entity Events - Create an application ID for the integration framework to authenticate to D365 CRM - Create an application user in D365 CRM and assign the proper role(s) - Create an Azure Service bus topic - Create a subscription on the topic above Configuration In the appsettings.json you will need to define the SourceConfig and TargetConfig nodes as follows: \"SourceConfig\": { \"ServiceBusConfigName\": [section name with service bus topic], \"ODataConfigName\": [section name with F&O data configuration], \"SystemName\": \"DynamicsAX\", \"Direction\": \"Source\" }, \"TargetConfig\": { \"ODataConfigName\": [section name with CRM data configuration], \"CDSConfigName\": [section name with CDS data configuration], \"SystemName\": \"DynamicsCRM\", \"Direction\": \"Target\" } D365 CRM to D365 F&O Setup To integrate from D365 CRM to D365 F&O you will need to: - Configure Azure Service Bus Endpoint in CRM - Configure Azure Service Bus plugin on the appropriate entities - Create an application ID for the integration framework to authenticate to D365 F&O - Create an Azure Active Directory Application in D365 F&O - Create an Azure Service bus topic - Create a subscription on the topic above Configuration In the appsettings.json you will need to define the SourceConfig and TargetConfig nodes as follows: \"SourceConfig\": { \"ServiceBusConfigName\": [section name with service bus topic], \"ODataConfigName\": [section name with CRM data configuration], \"SystemName\": \"DynamicsCRM\", \"Direction\": \"Source\" }, \"TargetConfig\": { \"ODataConfigName\": [section name with F&O data configuration], \"CDSConfigName\": [section name with CDS data configuration], \"SystemName\": \"DynamicsAX\", \"Direction\": \"Target\" } Kahler The Kahler integration is a bidirectional integration that consists of a Topic for Dispensing Work Orders that go from D365 F&O to Kahler and Dispensing Work Records that go from Kahler to D365 F&O. This means there are two instances of the integration running to handle the entire integration. One aspect of Kahler that is different from other integrations is the D365 F&O to Kahler instance must run on premise because the Kahler system runs behind the firewall. This should be deployed as a service. Another aspect that is different is that each location should only get the messages from the topic that apply to that location. This is done with a filter on the service bus topic subscription. In order for the filter to work the Levridge Entity Event must be configured to expose the branch property on the message. Setup To integrate to and from Kahler and D365 F&O you will need to: - Configure Levridge Entity Events - You will need to be sure to provide properties on the event to allow filtering by Branch - Create an application ID for the integration framework to authenticate to D365 F&O - Create an Azure Active Directory Application in D365 F&O - Create an Azure Service bus topic for Dispensing Work Orders (D365 F&O to Kahler) - Create an Azure Service bus topic for Dispensing Work Records (Kahler to D365 F&O) - Create a subscription on the Dispensing Work Order topic for each Branch that has a Kahler mixer - Create a filter on the subscription for each Branch - Create a subscription on the Dispensing Work Record topic for integration back to F&O - Deploy the Levridge Integration Framework as a service at each Branch that has a Kahler mixer Configuration for Kahler on Premise This configuration will need to be on premise with the Kahler mixer. In the appsettings.json you will need to define the SourceConfig and TargetConfig nodes as follows: \"Controllers\": { \"HostController\": \"Levridge.Integration.Host.DefaultController\", \"KahlerConroller\": \"Levridge.Integration.Host.KahlerController\" }, \"SourceConfig\": { \"ServiceBusConfigName\": \"Dispensing Work Order\", //[section name with Dispensing Work Order service bus topic] \"ODataConfigName\": \"DynamicsAX\", //[section name with F&O data configuration] \"SystemName\": \"DynamicsAX\", \"Direction\": \"Source\" }, \"TargetConfig\": { \"ODataConfigName\": \"Kahler End Point\", //[section name with Kahler data configuration], \"CDSConfigName\": [section name with CDS data configuration], \"SystemName\": \"Kahler\", \"Direction\": \"Target\" }, \"DynamicsAX\": { \"UriString\": [URL to D365 F&O], \"ActiveDirectoryResource\": [URL to D365 F&O], \"ActiveDirectoryTenant\": \"https://login.microsoftonline.com/[Customer_Tenant_ID]\", \"ActiveDirectoryClientAppId\": [Application ID used to register the application in AD], \"ActiveDirectoryClientAppSecret\": [Client Secret genrated for the Application ID in AD], \"ODataEntityPath\": \"[URL to D365 F&O]/data/\" }, \"Kahler End Point\": { \"UriString\": [URL to Local Kahler] }, \"Dispensing Work Order\": { \"ConnectionString\": [connection string to Dispensing Work Order Topic], \"TopicName\": [Dispensing Work Order Topic Name], \"SubscriptionName\": [Subscription Name for the Branch], \"RequiresSession\": true }, \"Levridge.Integration.Host.KahlerController\": { \"ConnectionString\": [connection string to Dispensing Work Record Topic], \"TopicName\": [Dispensing Work Record Topic Name], \"RequiresSession\": true } Controllers This section contains a list of controllers that will be loaded by the current instance. In addition to the default controller that we alwasy want to load, we want the system to load the Kahler controller. The names (on the left) are not significant and are used only for debugging. The values (on the right) are significant. It must be the name of the assembly that should be loaded for the controller. SourceConfig The source config will represent the data being send from D365 F&O. Currently, the Dispensing Work Order is the only entity sent from F&O. In the future the topic may also include master data that is sent to Kahler. The ODataConfigName is not currently being used but is a required value. So point it to the section that contains the connection information to D365 F&O. TargetConfig The target config will represent the data endpoint for the local Kahler mixer. The \"ODataConfigName\" should point to a section that contains the Kahler REST endpoint. Levridge.Integration.Host.KahlerController This section is used by the Kahler controller to be able to send messages to the proper topic to be handled by the integration framework and written to D365 F&O Configuration for Kahler in Azure This instance can be a single instance runing in the cloud. In the appsettings.json you will need to define the SourceConfig and TargetConfig nodes as follows: \"SourceConfig\": { \"ServiceBusConfigName\": \"Dispensing Work Record\", //[section name with Dispensing Work Record service bus topic] \"SystemName\": \"Kahler\", \"Direction\": \"Source\" }, \"TargetConfig\": { \"ODataConfigName\": \"DynamicsAX\", //[section name with F&O data configuration] \"SystemName\": \"DynamicsAX\", \"Direction\": \"Target\" }, \"DynamicsAX\": { \"UriString\": [URL to D365 F&O], \"ActiveDirectoryResource\": [URL to D365 F&O], \"ActiveDirectoryTenant\": \"https://login.microsoftonline.com/[Customer_Tenant_ID]\", \"ActiveDirectoryClientAppId\": [Application ID used to register the application in AD], \"ActiveDirectoryClientAppSecret\": [Client Secret genrated for the Application ID in AD], \"ODataEntityPath\": \"[URL to D365 F&O]/data/\" }, \"Dispensing Work Record\": { \"ConnectionString\": [connection string to Dispensing Work Record Topic], \"TopicName\": [Dispensing Work Record Topic Name], \"SubscriptionName\": [Subscription Name for Integration to D365 F&O], \"RequiresSession\": true } Agsync oneWeigh Field Reveal Surety Levridge Scale House","title":"Introduction"},{"location":"ReadMe (2)/#introduction","text":"The Levridge integration framework provides integration between Dynamics365 Finance and Operations and Dynamics 365 Customer Engagement and 3rd party applications. This document provides and overview of the integration framework and links to the document that exists for the framework.","title":"Introduction"},{"location":"ReadMe (2)/#overview","text":"The Levridge Integration Framework is an entity syncronization framework. It provides a means to synchronize data at an entity level between multiple data sources. All integrations that use the framework follow the same pattern: 1. A data source has an integration event 2. The data source responds to the integration event by sending one or more entities to the service bus. 3. The service bus publishes the message(s) to each subscription 4. An instance of the integration framework receives the message(s) from a subscription 5. The integration framework transforms the message it if needed 6. The integration framework sends the message to the target data source","title":"Overview"},{"location":"ReadMe (2)/#integrations","text":"Currently we support the following integrations: - D365 F&O to D365 CRM - D365 CRM to D365 F&O - Kahler - Agsync - oneWeigh - Field Reveal - Surety - Levridge Scale House","title":"Integrations"},{"location":"ReadMe (2)/#d365-fo-to-d365-crm","text":"","title":"D365 F&amp;O to D365 CRM"},{"location":"ReadMe (2)/#setup","text":"To integrate from D365 F&O to D365 CRM you will need to: - configure Levridge Entity Events - Create an application ID for the integration framework to authenticate to D365 CRM - Create an application user in D365 CRM and assign the proper role(s) - Create an Azure Service bus topic - Create a subscription on the topic above","title":"Setup"},{"location":"ReadMe (2)/#configuration","text":"In the appsettings.json you will need to define the SourceConfig and TargetConfig nodes as follows: \"SourceConfig\": { \"ServiceBusConfigName\": [section name with service bus topic], \"ODataConfigName\": [section name with F&O data configuration], \"SystemName\": \"DynamicsAX\", \"Direction\": \"Source\" }, \"TargetConfig\": { \"ODataConfigName\": [section name with CRM data configuration], \"CDSConfigName\": [section name with CDS data configuration], \"SystemName\": \"DynamicsCRM\", \"Direction\": \"Target\" }","title":"Configuration"},{"location":"ReadMe (2)/#d365-crm-to-d365-fo","text":"","title":"D365 CRM to D365 F&amp;O"},{"location":"ReadMe (2)/#setup_1","text":"To integrate from D365 CRM to D365 F&O you will need to: - Configure Azure Service Bus Endpoint in CRM - Configure Azure Service Bus plugin on the appropriate entities - Create an application ID for the integration framework to authenticate to D365 F&O - Create an Azure Active Directory Application in D365 F&O - Create an Azure Service bus topic - Create a subscription on the topic above","title":"Setup"},{"location":"ReadMe (2)/#configuration_1","text":"In the appsettings.json you will need to define the SourceConfig and TargetConfig nodes as follows: \"SourceConfig\": { \"ServiceBusConfigName\": [section name with service bus topic], \"ODataConfigName\": [section name with CRM data configuration], \"SystemName\": \"DynamicsCRM\", \"Direction\": \"Source\" }, \"TargetConfig\": { \"ODataConfigName\": [section name with F&O data configuration], \"CDSConfigName\": [section name with CDS data configuration], \"SystemName\": \"DynamicsAX\", \"Direction\": \"Target\" }","title":"Configuration"},{"location":"ReadMe (2)/#kahler","text":"The Kahler integration is a bidirectional integration that consists of a Topic for Dispensing Work Orders that go from D365 F&O to Kahler and Dispensing Work Records that go from Kahler to D365 F&O. This means there are two instances of the integration running to handle the entire integration. One aspect of Kahler that is different from other integrations is the D365 F&O to Kahler instance must run on premise because the Kahler system runs behind the firewall. This should be deployed as a service. Another aspect that is different is that each location should only get the messages from the topic that apply to that location. This is done with a filter on the service bus topic subscription. In order for the filter to work the Levridge Entity Event must be configured to expose the branch property on the message.","title":"Kahler"},{"location":"ReadMe (2)/#setup_2","text":"To integrate to and from Kahler and D365 F&O you will need to: - Configure Levridge Entity Events - You will need to be sure to provide properties on the event to allow filtering by Branch - Create an application ID for the integration framework to authenticate to D365 F&O - Create an Azure Active Directory Application in D365 F&O - Create an Azure Service bus topic for Dispensing Work Orders (D365 F&O to Kahler) - Create an Azure Service bus topic for Dispensing Work Records (Kahler to D365 F&O) - Create a subscription on the Dispensing Work Order topic for each Branch that has a Kahler mixer - Create a filter on the subscription for each Branch - Create a subscription on the Dispensing Work Record topic for integration back to F&O - Deploy the Levridge Integration Framework as a service at each Branch that has a Kahler mixer","title":"Setup"},{"location":"ReadMe (2)/#configuration-for-kahler-on-premise","text":"This configuration will need to be on premise with the Kahler mixer. In the appsettings.json you will need to define the SourceConfig and TargetConfig nodes as follows: \"Controllers\": { \"HostController\": \"Levridge.Integration.Host.DefaultController\", \"KahlerConroller\": \"Levridge.Integration.Host.KahlerController\" }, \"SourceConfig\": { \"ServiceBusConfigName\": \"Dispensing Work Order\", //[section name with Dispensing Work Order service bus topic] \"ODataConfigName\": \"DynamicsAX\", //[section name with F&O data configuration] \"SystemName\": \"DynamicsAX\", \"Direction\": \"Source\" }, \"TargetConfig\": { \"ODataConfigName\": \"Kahler End Point\", //[section name with Kahler data configuration], \"CDSConfigName\": [section name with CDS data configuration], \"SystemName\": \"Kahler\", \"Direction\": \"Target\" }, \"DynamicsAX\": { \"UriString\": [URL to D365 F&O], \"ActiveDirectoryResource\": [URL to D365 F&O], \"ActiveDirectoryTenant\": \"https://login.microsoftonline.com/[Customer_Tenant_ID]\", \"ActiveDirectoryClientAppId\": [Application ID used to register the application in AD], \"ActiveDirectoryClientAppSecret\": [Client Secret genrated for the Application ID in AD], \"ODataEntityPath\": \"[URL to D365 F&O]/data/\" }, \"Kahler End Point\": { \"UriString\": [URL to Local Kahler] }, \"Dispensing Work Order\": { \"ConnectionString\": [connection string to Dispensing Work Order Topic], \"TopicName\": [Dispensing Work Order Topic Name], \"SubscriptionName\": [Subscription Name for the Branch], \"RequiresSession\": true }, \"Levridge.Integration.Host.KahlerController\": { \"ConnectionString\": [connection string to Dispensing Work Record Topic], \"TopicName\": [Dispensing Work Record Topic Name], \"RequiresSession\": true }","title":"Configuration for Kahler on Premise"},{"location":"ReadMe (2)/#controllers","text":"This section contains a list of controllers that will be loaded by the current instance. In addition to the default controller that we alwasy want to load, we want the system to load the Kahler controller. The names (on the left) are not significant and are used only for debugging. The values (on the right) are significant. It must be the name of the assembly that should be loaded for the controller.","title":"Controllers"},{"location":"ReadMe (2)/#sourceconfig","text":"The source config will represent the data being send from D365 F&O. Currently, the Dispensing Work Order is the only entity sent from F&O. In the future the topic may also include master data that is sent to Kahler. The ODataConfigName is not currently being used but is a required value. So point it to the section that contains the connection information to D365 F&O.","title":"SourceConfig"},{"location":"ReadMe (2)/#targetconfig","text":"The target config will represent the data endpoint for the local Kahler mixer. The \"ODataConfigName\" should point to a section that contains the Kahler REST endpoint.","title":"TargetConfig"},{"location":"ReadMe (2)/#levridgeintegrationhostkahlercontroller","text":"This section is used by the Kahler controller to be able to send messages to the proper topic to be handled by the integration framework and written to D365 F&O","title":"Levridge.Integration.Host.KahlerController"},{"location":"ReadMe (2)/#configuration-for-kahler-in-azure","text":"This instance can be a single instance runing in the cloud. In the appsettings.json you will need to define the SourceConfig and TargetConfig nodes as follows: \"SourceConfig\": { \"ServiceBusConfigName\": \"Dispensing Work Record\", //[section name with Dispensing Work Record service bus topic] \"SystemName\": \"Kahler\", \"Direction\": \"Source\" }, \"TargetConfig\": { \"ODataConfigName\": \"DynamicsAX\", //[section name with F&O data configuration] \"SystemName\": \"DynamicsAX\", \"Direction\": \"Target\" }, \"DynamicsAX\": { \"UriString\": [URL to D365 F&O], \"ActiveDirectoryResource\": [URL to D365 F&O], \"ActiveDirectoryTenant\": \"https://login.microsoftonline.com/[Customer_Tenant_ID]\", \"ActiveDirectoryClientAppId\": [Application ID used to register the application in AD], \"ActiveDirectoryClientAppSecret\": [Client Secret genrated for the Application ID in AD], \"ODataEntityPath\": \"[URL to D365 F&O]/data/\" }, \"Dispensing Work Record\": { \"ConnectionString\": [connection string to Dispensing Work Record Topic], \"TopicName\": [Dispensing Work Record Topic Name], \"SubscriptionName\": [Subscription Name for Integration to D365 F&O], \"RequiresSession\": true }","title":"Configuration for Kahler in Azure"},{"location":"ReadMe (2)/#agsync","text":"","title":"Agsync"},{"location":"ReadMe (2)/#oneweigh","text":"","title":"oneWeigh"},{"location":"ReadMe (2)/#field-reveal","text":"","title":"Field Reveal"},{"location":"ReadMe (2)/#surety","text":"","title":"Surety"},{"location":"ReadMe (2)/#levridge-scale-house","text":"","title":"Levridge Scale House"},{"location":"Scale-Overview/","text":"Overview The purpose of Levridge Scale is to receive all the data measured at the scales at ag retailer locations and incorporate it into a scale ticket which can be printed out and given to the grower, while also bringing the scale ticket into the Dynamics 365 ERP system. Within the accounting technology solution, the contents of the scale ticket can be accounted for and posted against contracts the grower has with the ag retailer. Levridge Scale House Installation Levridge Scale House Integration Scale Ticket Types Inbound Grain Outbound Grain Inbound Agronomy Outbound Agronomy Transfer Weight Only Open Scale Tickets These will be shown \"in the yard\" since they are uncompleted tickets that have not been printed. Scale Ticket History This is the history of printed tickets from today and the previous day. Application Configuration This is where the settings to change Site, Print, Etc. are located. Delivery Sheets Here you can view and create delivery sheets for grain tickets. The scale tickets and delivery sheets will sync both ways between F&O and the scale app. Create Scale Tickets http://levscaledev.corp.stoneridgesoftware.com/","title":"Scale Overview"},{"location":"Scale-Overview/#overview","text":"The purpose of Levridge Scale is to receive all the data measured at the scales at ag retailer locations and incorporate it into a scale ticket which can be printed out and given to the grower, while also bringing the scale ticket into the Dynamics 365 ERP system. Within the accounting technology solution, the contents of the scale ticket can be accounted for and posted against contracts the grower has with the ag retailer. Levridge Scale House Installation Levridge Scale House Integration","title":"Overview"},{"location":"Scale-Overview/#scale-ticket-types","text":"Inbound Grain Outbound Grain Inbound Agronomy Outbound Agronomy Transfer Weight Only","title":"Scale Ticket Types"},{"location":"Scale-Overview/#open-scale-tickets","text":"These will be shown \"in the yard\" since they are uncompleted tickets that have not been printed.","title":"Open Scale Tickets"},{"location":"Scale-Overview/#scale-ticket-history","text":"This is the history of printed tickets from today and the previous day.","title":"Scale Ticket History"},{"location":"Scale-Overview/#application-configuration","text":"This is where the settings to change Site, Print, Etc. are located.","title":"Application Configuration"},{"location":"Scale-Overview/#delivery-sheets","text":"Here you can view and create delivery sheets for grain tickets. The scale tickets and delivery sheets will sync both ways between F&O and the scale app.","title":"Delivery Sheets"},{"location":"Scale-Overview/#create-scale-tickets","text":"http://levscaledev.corp.stoneridgesoftware.com/","title":"Create Scale Tickets"},{"location":"ServiceBusConfiguration/","text":"Introduction Brief introduction of the module, component or feature being documented. This document explains ... Overview Main Point 1 Sub Point 1.1","title":"Introduction"},{"location":"ServiceBusConfiguration/#introduction","text":"Brief introduction of the module, component or feature being documented. This document explains ...","title":"Introduction"},{"location":"ServiceBusConfiguration/#overview","text":"","title":"Overview"},{"location":"ServiceBusConfiguration/#main-point-1","text":"","title":"Main Point 1"},{"location":"ServiceBusConfiguration/#sub-point-11","text":"","title":"Sub Point 1.1"},{"location":"SourceConfig/","text":"Introduction SourceConfig is an object in the appsettings.json file used by the Levridge Integration Framework to define the configuration for the Source of an integration interaction. Example \"SourceConfig\": { \"ServiceBusConfigName\": \"Levridge.Integration.Host.SuretyController\", \"ODataConfigName\": \"DynamicsCRM\", \"SystemName\": \"Surety\", \"Direction\": \"Source\" } Definition SourceConfig The node in the appsettings.json file does not actually need to be named \"SourceConfig\". You can use a command line parameter to specify the node name (section name) that contains the SourceConfig data. No matter the name, the source config section must contain the following attributes: - ServiceBusConfigName - ODataConfigName - SystemName - Direction ServiceBusConfigName The ServiceBusConfigName attribute contains a string that specifies the configuration node (section) that holds the service bus configuration used by the Source of the Integration Interaction. This must point to a node that is a ServiceBusConfig json object ODataConfigName The ODataConfigName attribute contains a string that specifies the configuration node (section) that holds the data configuration used by the Source of the Integration Interaction. This must point to a node that is a ODataConfig json object SystemName The SystemName attribute holds a string value that represents the source system name. It must be one of the names recognized by the SystemName enumeration . Direction The direction is either Soruce or Target. This must be specified since the SourceConfig Node can have any name so the direction of the configuration may not be clear from the name.","title":"Introduction"},{"location":"SourceConfig/#introduction","text":"SourceConfig is an object in the appsettings.json file used by the Levridge Integration Framework to define the configuration for the Source of an integration interaction.","title":"Introduction"},{"location":"SourceConfig/#example","text":"\"SourceConfig\": { \"ServiceBusConfigName\": \"Levridge.Integration.Host.SuretyController\", \"ODataConfigName\": \"DynamicsCRM\", \"SystemName\": \"Surety\", \"Direction\": \"Source\" }","title":"Example"},{"location":"SourceConfig/#definition","text":"","title":"Definition"},{"location":"SourceConfig/#sourceconfig","text":"The node in the appsettings.json file does not actually need to be named \"SourceConfig\". You can use a command line parameter to specify the node name (section name) that contains the SourceConfig data. No matter the name, the source config section must contain the following attributes: - ServiceBusConfigName - ODataConfigName - SystemName - Direction","title":"SourceConfig"},{"location":"SourceConfig/#servicebusconfigname","text":"The ServiceBusConfigName attribute contains a string that specifies the configuration node (section) that holds the service bus configuration used by the Source of the Integration Interaction. This must point to a node that is a ServiceBusConfig json object","title":"ServiceBusConfigName"},{"location":"SourceConfig/#odataconfigname","text":"The ODataConfigName attribute contains a string that specifies the configuration node (section) that holds the data configuration used by the Source of the Integration Interaction. This must point to a node that is a ODataConfig json object","title":"ODataConfigName"},{"location":"SourceConfig/#systemname","text":"The SystemName attribute holds a string value that represents the source system name. It must be one of the names recognized by the SystemName enumeration .","title":"SystemName"},{"location":"SourceConfig/#direction","text":"The direction is either Soruce or Target. This must be specified since the SourceConfig Node can have any name so the direction of the configuration may not be clear from the name.","title":"Direction"},{"location":"Surety/","text":"Surety","title":"Surety"},{"location":"Surety/#surety","text":"","title":"Surety"},{"location":"SystemName/","text":"","title":"SystemName"},{"location":"TargetConfig/","text":"Introduction TargetConfig is an object in the appsettings.json file used by the Levridge Integration Framework to define the configuration for the Source of an integration interaction. Example \"TargetConfig\": { \"ODataConfigName\": \"DynamicsCRM\", \"CDSConfigName\": \"CDS\", \"SystemName\": \"DynamicsCRM\", \"Direction\": \"Source\" } Definition TargetConfig The node in the appsettings.json file does not actually need to be named \"TargetConfig\". You can use a command line parameter to specify the node name (section name) that contains the TargetConfig data. No matter the name, the source config section must contain the following attributes: - ODataConfigName - CDSConfigName - SystemName - Direction ODataConfigName The ODataConfigName attribute contains a string that specifies the configuration node (section) that holds the data configuration used by the Source of the Integration Interaction. This must point to a node that is a ODataConfig json object CDSConfigName The ServiceBusConfigName attribute contains a string that specifies the configuration node (section) that holds the service bus configuration used by the Source of the Integration Interaction. This must point to a node that is a CDSConfig json object SystemName The SystemName attribute holds a string value that represents the source system name. It must be one of the names recognized by the SystemName enumeration . Direction The direction is either Soruce or Target. This must be specified since the TargetConfig Node can have any name so the direction of the configuration may not be clear from the name.","title":"Introduction"},{"location":"TargetConfig/#introduction","text":"TargetConfig is an object in the appsettings.json file used by the Levridge Integration Framework to define the configuration for the Source of an integration interaction.","title":"Introduction"},{"location":"TargetConfig/#example","text":"\"TargetConfig\": { \"ODataConfigName\": \"DynamicsCRM\", \"CDSConfigName\": \"CDS\", \"SystemName\": \"DynamicsCRM\", \"Direction\": \"Source\" }","title":"Example"},{"location":"TargetConfig/#definition","text":"","title":"Definition"},{"location":"TargetConfig/#targetconfig","text":"The node in the appsettings.json file does not actually need to be named \"TargetConfig\". You can use a command line parameter to specify the node name (section name) that contains the TargetConfig data. No matter the name, the source config section must contain the following attributes: - ODataConfigName - CDSConfigName - SystemName - Direction","title":"TargetConfig"},{"location":"TargetConfig/#odataconfigname","text":"The ODataConfigName attribute contains a string that specifies the configuration node (section) that holds the data configuration used by the Source of the Integration Interaction. This must point to a node that is a ODataConfig json object","title":"ODataConfigName"},{"location":"TargetConfig/#cdsconfigname","text":"The ServiceBusConfigName attribute contains a string that specifies the configuration node (section) that holds the service bus configuration used by the Source of the Integration Interaction. This must point to a node that is a CDSConfig json object","title":"CDSConfigName"},{"location":"TargetConfig/#systemname","text":"The SystemName attribute holds a string value that represents the source system name. It must be one of the names recognized by the SystemName enumeration .","title":"SystemName"},{"location":"TargetConfig/#direction","text":"The direction is either Soruce or Target. This must be specified since the TargetConfig Node can have any name so the direction of the configuration may not be clear from the name.","title":"Direction"},{"location":"Template/","text":"Introduction Brief introduction of the module, component or feature being documented. This document explains ... Overview Main Point 1 Sub Point 1.1","title":"Introduction"},{"location":"Template/#introduction","text":"Brief introduction of the module, component or feature being documented. This document explains ...","title":"Introduction"},{"location":"Template/#overview","text":"","title":"Overview"},{"location":"Template/#main-point-1","text":"","title":"Main Point 1"},{"location":"Template/#sub-point-11","text":"","title":"Sub Point 1.1"},{"location":"Unit-Testing-Entity-Mappings/","text":"Introduction This library provides the base classes and utility classes to help you bild unit tests for the integration framework. It contains classes in the following categories: * Mapping Unit Test Helper Classes * Service Bus Helper and Mock classes * Integration Test Helper Classes Mapping Unit Test Helper Classes EntityMapBuilderExtensionsTestHelper The EntityMapBuilderExtensionsTestHelper class contains static methods you can use to obtain an EntityMapProvider<> for a particular scenario and methods to execute A2B and B2A synchronization using the EntityMapProvider<> obtained. To create a unit test that can test a mapping scenario, reference this library in your test project. Then create a unit test using the following steps: Call GetEntityMapProvider (Type entityMapBuilderType, string methodName) passing the source target template parameter types as defined on the mapping method along with the class that contains the mapping method and the name of the mapping method that you want to test. For example, to test the mapping for AxEntities.ScaleTicketGradeFactor and ScaleHouseEntities.ScaleTicketGradeFactor make the following call: var mapProvider = EntityMapBuilderExtensionsTestHelper.GetEntityMapProvider<AxEntities.ScaleTicketGradeFactor, ScaleHouseEntities.ScaleTicketGradeFactor>(typeof(AxToScaleEntityMapBuilderExtensions), \"MapAXScaleTicketGradeFactor_ScaleHouseScaleTicketGradeFactor\"); Instantiate and populate the entities you want to use for mapping. I prefer to use the [MemberData] attribute to provide multiple instances for testing. See this article for example on providing data for unit tests. Use the EntityMapProvider<> to perform the mapping by calling one of the transform methods on The EntityMapBuilderExtensionsTestHelper class. For example, to test the B2A mapping for the previous example use the following code: AXentity = EntityMapBuilderExtensionsTestHelper.TransformB2A(mapProvider, ScaleEntity, AXentity); Assert - check the mapped values In order to test the expected values you should have an instance of the target object with the expected values and then get the transformed object from the target entity and compare the two. You can pass in an object with the expected values using the MemberData method. Example: // Get target object var targetObject = AXentity.GetEntityAsDotNetType<AxEntities.ScaleTicketGradeFactor>(); // Assert Assert.NotNull(targetObject); Assert.Equal(expectedResult.GradeFactorId, targetObject.GradeFactorId); Assert.Equal(expectedResult.GradeFactorValue, targetObject.GradeFactorValue); Assert.Equal(expectedResult.TicketNumber, targetObject.TicketNumber); Assert.Equal(expectedResult.LineNumber, targetObject.LineNumber); Using MemberData to Provide Unit Test Data If you want to use the MemberData method for building data to use in your unit tests (you can refer to this article for an over view) here are some ideas. 1. Create Methods to Instantiate and Populate the Source and Expected Target Objects I would recommend creating a private static method on your test class that recieves parameters that can be used to initialize the class with the desired values. If you need several parameters you can put them in an object array or Key Value pair or even a dictionary. Example: private static AxEntities.ScaleTicketGradeFactor GetAxTicketGradeFactorObject(int line, string id, string value, string ticketNumber) { return new AxEntities.ScaleTicketGradeFactor() { LineNumber = line, GradeFactorId = id, GradeFactorValue = decimal.Parse(value), TicketNumber = ticketNumber }; } 2. Create Methods to Instantiate and Populate the Source and Target Entities Once you have a populated source object you can use it to instantiate and initialize a source Entity. Example: private static Entity GetAxTicketGradeFactorEntity(AxEntities.ScaleTicketGradeFactor scaleTicketGradeFactor = null) { var axScaleTicketGradeFactor = scaleTicketGradeFactor ?? new AxEntities.ScaleTicketGradeFactor(); Entity entity = DynamicsAxEntities.Instance.GetScaleTicketGradeFactorEntity(); entity.CreateAndPopulateEntityFields(typeof(JSONField<>), axScaleTicketGradeFactor); return entity; } As you can see, if an object is provided, it is used to initialize the Entity. Otherwise a default object is used. 3. Implement the MemberData Method As described in this article for an over view) the MemberData method must return IEnumerable<object[]> . You can craete a method that uses the methods described in the previous steps to create source & target entities along with a target expected object. Then you can define that method using the [MemberData] attribute. Here is an example MemberData method: public static IEnumerable<object[]> GetSynchronizeA2BGradeFactorData() { return new List<object[]> { new object[] { GetAxTicketGradeFactorEntity(GetAxTicketGradeFactorObject(1, \"A\", \"8\", \"0000169\")), GetScaleHouseGradeFactorEntity(), GetScaleHouseTicketGradeFactorObject(1, \"A\", \"8\", \"0000169\") }, new object[] { GetAxTicketGradeFactorEntity(GetAxTicketGradeFactorObject(2, \"AB\", \"0.3\", \"0000169\")), GetScaleHouseGradeFactorEntity(), GetScaleHouseTicketGradeFactorObject(2, \"AB\", \"0.3\", \"0000169\") }, new object[] { GetAxTicketGradeFactorEntity(GetAxTicketGradeFactorObject(3, \"AS\", \"31.3\", \"0000169\")), GetScaleHouseGradeFactorEntity(), GetScaleHouseTicketGradeFactorObject(3, \"AS\", \"31.3\", \"0000169\") } }; } Example Unit Test Here is an example unit test that tests Ticket Grade Factor entities from the ScaleHouse application to F&O. [Theory] [MemberData(nameof(GetSynchronizeB2AGradeFactorData))] public void MapScaleTicketGradeFactor_SynchronizeB2AGradeFactor_CorrectMapping( Entity AXentity, // AX ticket grade factor Entity ScaleEntity, // Scale house ticket grade factor AxEntities.ScaleTicketGradeFactor expectedResult) { // Arrange var mapProvider = EntityMapBuilderExtensionsTestHelper.GetEntityMapProvider<AxEntities.ScaleTicketGradeFactor, ScaleHouseEntities.ScaleTicketGradeFactor> (typeof(AxToScaleEntityMapBuilderExtensions), \"MapAXScaleTicketGradeFactor_ScaleHouseScaleTicketGradeFactor\"); //Act // Transform AXentity = EntityMapBuilderExtensionsTestHelper.TransformB2A(mapProvider, ScaleEntity, AXentity); // Get target object var targetObject = AXentity.GetEntityAsDotNetType<AxEntities.ScaleTicketGradeFactor>(); // Assert Assert.NotNull(targetObject); Assert.Equal(expectedResult.GradeFactorId, targetObject.GradeFactorId); Assert.Equal(expectedResult.GradeFactorValue, targetObject.GradeFactorValue); Assert.Equal(expectedResult.TicketNumber, targetObject.TicketNumber); Assert.Equal(expectedResult.LineNumber, targetObject.LineNumber); }","title":"Introduction"},{"location":"Unit-Testing-Entity-Mappings/#introduction","text":"This library provides the base classes and utility classes to help you bild unit tests for the integration framework. It contains classes in the following categories: * Mapping Unit Test Helper Classes * Service Bus Helper and Mock classes * Integration Test Helper Classes","title":"Introduction"},{"location":"Unit-Testing-Entity-Mappings/#mapping-unit-test-helper-classes","text":"","title":"Mapping Unit Test Helper Classes"},{"location":"Unit-Testing-Entity-Mappings/#entitymapbuilderextensionstesthelper","text":"The EntityMapBuilderExtensionsTestHelper class contains static methods you can use to obtain an EntityMapProvider<> for a particular scenario and methods to execute A2B and B2A synchronization using the EntityMapProvider<> obtained. To create a unit test that can test a mapping scenario, reference this library in your test project. Then create a unit test using the following steps: Call GetEntityMapProvider (Type entityMapBuilderType, string methodName) passing the source target template parameter types as defined on the mapping method along with the class that contains the mapping method and the name of the mapping method that you want to test. For example, to test the mapping for AxEntities.ScaleTicketGradeFactor and ScaleHouseEntities.ScaleTicketGradeFactor make the following call: var mapProvider = EntityMapBuilderExtensionsTestHelper.GetEntityMapProvider<AxEntities.ScaleTicketGradeFactor, ScaleHouseEntities.ScaleTicketGradeFactor>(typeof(AxToScaleEntityMapBuilderExtensions), \"MapAXScaleTicketGradeFactor_ScaleHouseScaleTicketGradeFactor\"); Instantiate and populate the entities you want to use for mapping. I prefer to use the [MemberData] attribute to provide multiple instances for testing. See this article for example on providing data for unit tests. Use the EntityMapProvider<> to perform the mapping by calling one of the transform methods on The EntityMapBuilderExtensionsTestHelper class. For example, to test the B2A mapping for the previous example use the following code: AXentity = EntityMapBuilderExtensionsTestHelper.TransformB2A(mapProvider, ScaleEntity, AXentity); Assert - check the mapped values In order to test the expected values you should have an instance of the target object with the expected values and then get the transformed object from the target entity and compare the two. You can pass in an object with the expected values using the MemberData method. Example: // Get target object var targetObject = AXentity.GetEntityAsDotNetType<AxEntities.ScaleTicketGradeFactor>(); // Assert Assert.NotNull(targetObject); Assert.Equal(expectedResult.GradeFactorId, targetObject.GradeFactorId); Assert.Equal(expectedResult.GradeFactorValue, targetObject.GradeFactorValue); Assert.Equal(expectedResult.TicketNumber, targetObject.TicketNumber); Assert.Equal(expectedResult.LineNumber, targetObject.LineNumber);","title":"EntityMapBuilderExtensionsTestHelper"},{"location":"Unit-Testing-Entity-Mappings/#using-memberdata-to-provide-unit-test-data","text":"If you want to use the MemberData method for building data to use in your unit tests (you can refer to this article for an over view) here are some ideas.","title":"Using MemberData to Provide Unit Test Data"},{"location":"Unit-Testing-Entity-Mappings/#1-create-methods-to-instantiate-and-populate-the-source-and-expected-target-objects","text":"I would recommend creating a private static method on your test class that recieves parameters that can be used to initialize the class with the desired values. If you need several parameters you can put them in an object array or Key Value pair or even a dictionary. Example: private static AxEntities.ScaleTicketGradeFactor GetAxTicketGradeFactorObject(int line, string id, string value, string ticketNumber) { return new AxEntities.ScaleTicketGradeFactor() { LineNumber = line, GradeFactorId = id, GradeFactorValue = decimal.Parse(value), TicketNumber = ticketNumber }; }","title":"1. Create Methods to Instantiate and Populate the Source and Expected Target Objects"},{"location":"Unit-Testing-Entity-Mappings/#2-create-methods-to-instantiate-and-populate-the-source-and-target-entities","text":"Once you have a populated source object you can use it to instantiate and initialize a source Entity. Example: private static Entity GetAxTicketGradeFactorEntity(AxEntities.ScaleTicketGradeFactor scaleTicketGradeFactor = null) { var axScaleTicketGradeFactor = scaleTicketGradeFactor ?? new AxEntities.ScaleTicketGradeFactor(); Entity entity = DynamicsAxEntities.Instance.GetScaleTicketGradeFactorEntity(); entity.CreateAndPopulateEntityFields(typeof(JSONField<>), axScaleTicketGradeFactor); return entity; } As you can see, if an object is provided, it is used to initialize the Entity. Otherwise a default object is used.","title":"2. Create Methods to Instantiate and Populate the Source and Target Entities"},{"location":"Unit-Testing-Entity-Mappings/#3-implement-the-memberdata-method","text":"As described in this article for an over view) the MemberData method must return IEnumerable<object[]> . You can craete a method that uses the methods described in the previous steps to create source & target entities along with a target expected object. Then you can define that method using the [MemberData] attribute. Here is an example MemberData method: public static IEnumerable<object[]> GetSynchronizeA2BGradeFactorData() { return new List<object[]> { new object[] { GetAxTicketGradeFactorEntity(GetAxTicketGradeFactorObject(1, \"A\", \"8\", \"0000169\")), GetScaleHouseGradeFactorEntity(), GetScaleHouseTicketGradeFactorObject(1, \"A\", \"8\", \"0000169\") }, new object[] { GetAxTicketGradeFactorEntity(GetAxTicketGradeFactorObject(2, \"AB\", \"0.3\", \"0000169\")), GetScaleHouseGradeFactorEntity(), GetScaleHouseTicketGradeFactorObject(2, \"AB\", \"0.3\", \"0000169\") }, new object[] { GetAxTicketGradeFactorEntity(GetAxTicketGradeFactorObject(3, \"AS\", \"31.3\", \"0000169\")), GetScaleHouseGradeFactorEntity(), GetScaleHouseTicketGradeFactorObject(3, \"AS\", \"31.3\", \"0000169\") } }; }","title":"3. Implement the MemberData Method"},{"location":"Unit-Testing-Entity-Mappings/#example-unit-test","text":"Here is an example unit test that tests Ticket Grade Factor entities from the ScaleHouse application to F&O. [Theory] [MemberData(nameof(GetSynchronizeB2AGradeFactorData))] public void MapScaleTicketGradeFactor_SynchronizeB2AGradeFactor_CorrectMapping( Entity AXentity, // AX ticket grade factor Entity ScaleEntity, // Scale house ticket grade factor AxEntities.ScaleTicketGradeFactor expectedResult) { // Arrange var mapProvider = EntityMapBuilderExtensionsTestHelper.GetEntityMapProvider<AxEntities.ScaleTicketGradeFactor, ScaleHouseEntities.ScaleTicketGradeFactor> (typeof(AxToScaleEntityMapBuilderExtensions), \"MapAXScaleTicketGradeFactor_ScaleHouseScaleTicketGradeFactor\"); //Act // Transform AXentity = EntityMapBuilderExtensionsTestHelper.TransformB2A(mapProvider, ScaleEntity, AXentity); // Get target object var targetObject = AXentity.GetEntityAsDotNetType<AxEntities.ScaleTicketGradeFactor>(); // Assert Assert.NotNull(targetObject); Assert.Equal(expectedResult.GradeFactorId, targetObject.GradeFactorId); Assert.Equal(expectedResult.GradeFactorValue, targetObject.GradeFactorValue); Assert.Equal(expectedResult.TicketNumber, targetObject.TicketNumber); Assert.Equal(expectedResult.LineNumber, targetObject.LineNumber); }","title":"Example Unit Test"},{"location":"about/","text":"","title":"About"},{"location":"oneWeigh/","text":"oneWeigh","title":"oneWeigh"},{"location":"oneWeigh/#oneweigh","text":"","title":"oneWeigh"},{"location":"print-service/","text":"Print Service Installing Print Service Application To first install print service application, open Visual Studio. In Visual Studio, the print service is checked-in at \"$/Levridge/CRM/Main/PrintService\". Double click this and map it to a path on your machine. In Visual Studio, click Build > Build Solution. Activate the service as detailed below in PowerShell: Right click on the windows icon and select \"Windows PowerShell (Admin)\" Enter the following command once. Be sure to substitute the local path! New-Service-Name\"PrintService\"-\"{Your Local path to project}\\PrintService\\bin\\Debug\\PrintService.exe-k netsvcs\" Locating Printer Network Name If a printer is a network device, its name will be more difficult to locate. Use these steps to find the name that the Print Service application will use to print: Go to control panel and locate the setting titled \"Devices and Printers\" (Note: Not all setting are in this screenshot. This view is set to \"Small icons\") Navigate to the list of print options on your computer and select the device of your choice. The full network name that is required for the code is listed once you select the printer. (Highlighted in yellow below) Using Print Service Application After initial setup, use one of the following two options to start the Application. PowerShell Following the first setup, you can enter the following command into PowerShell instead. Start-Service-Name\"PrintService\" Services App. Use Windows+R to select \"services.msc\" to open Services Management Console. Right click on PrintService and select \"start\" Setting Up a New Printer To set up a new printer, new parameters will need to be setup. To add the parameters, open the app.config file in the project and add the following: ServiceBusConnectionString ServiceBusTopicSubscription ServiceBusTopic PrinterName SiteID Two parameters will also need to be updated. These two need to be changed for the printer that is being printed to. The Site ID is the customer site code from CRM. For debugging the Service, we can use the Windows Event Viewer. Go to Administrative tools in the Control Panel and Open Event Viewer. Additional Information and Documentation In CRM on the sales ordered details header, there is an Auto Print Field. Set to Yes and click save. The sales order will then print.","title":"Print Service"},{"location":"print-service/#print-service","text":"","title":"Print Service"},{"location":"print-service/#installing-print-service-application","text":"To first install print service application, open Visual Studio. In Visual Studio, the print service is checked-in at \"$/Levridge/CRM/Main/PrintService\". Double click this and map it to a path on your machine. In Visual Studio, click Build > Build Solution. Activate the service as detailed below in PowerShell: Right click on the windows icon and select \"Windows PowerShell (Admin)\" Enter the following command once. Be sure to substitute the local path! New-Service-Name\"PrintService\"-\"{Your Local path to project}\\PrintService\\bin\\Debug\\PrintService.exe-k netsvcs\"","title":"Installing Print Service Application"},{"location":"print-service/#locating-printer-network-name","text":"If a printer is a network device, its name will be more difficult to locate. Use these steps to find the name that the Print Service application will use to print: Go to control panel and locate the setting titled \"Devices and Printers\" (Note: Not all setting are in this screenshot. This view is set to \"Small icons\") Navigate to the list of print options on your computer and select the device of your choice. The full network name that is required for the code is listed once you select the printer. (Highlighted in yellow below)","title":"Locating Printer Network Name"},{"location":"print-service/#using-print-service-application","text":"After initial setup, use one of the following two options to start the Application. PowerShell Following the first setup, you can enter the following command into PowerShell instead. Start-Service-Name\"PrintService\" Services App. Use Windows+R to select \"services.msc\" to open Services Management Console. Right click on PrintService and select \"start\"","title":"Using Print Service Application"},{"location":"print-service/#setting-up-a-new-printer","text":"To set up a new printer, new parameters will need to be setup. To add the parameters, open the app.config file in the project and add the following: ServiceBusConnectionString ServiceBusTopicSubscription ServiceBusTopic PrinterName SiteID Two parameters will also need to be updated. These two need to be changed for the printer that is being printed to. The Site ID is the customer site code from CRM. For debugging the Service, we can use the Windows Event Viewer. Go to Administrative tools in the Control Panel and Open Event Viewer.","title":"Setting Up a New Printer"},{"location":"print-service/#additional-information-and-documentation","text":"In CRM on the sales ordered details header, there is an Auto Print Field. Set to Yes and click save. The sales order will then print.","title":"Additional Information and Documentation"},{"location":"scale-integration/","text":"Levridge Scale House Integration Azure service bus explorer for integration Down - F&O to scale, Up - Scale to F&O Appsettings.json - configuration file, edit file to switch between up and down Integration F&O to scale The link below contains the integration list that has the entities needed when integrating F&O to scale through System administration > Setup > Event Framework > Event framework events. https://teams.microsoft.com/_#/xlsx/viewer/teams/https:~2F~2Fstoneridgesoft.sharepoint.com~2Fsites~2Flevridge~2FShared%20Documents~2FGeneral~2FDevelopment~2FIntegration~2FIntegration%20Event%20Ordered%20Entity%20List.xlsx?threadId=19:7aa3b4752ccd44c38b06dca038958883@thread.skype&baseUrl=https:~2F~2Fstoneridgesoft.sharepoint.com~2Fsites~2Flevridge&fileId=8AEC9593-E967-4418-8201-6E6158C18F3E&ctx=files&viewerAction=edit System administration > Setup > Event framework > Event framework events Run azure service bus Down Run IntegrationConsole.cmd Integration scale to F&O Run azure service bus Up Run IntegrationConsole.cmd When Print is clicked on the scale app, the ticket will then sync to F&O.","title":"Levridge Scale House"},{"location":"scale-integration/#levridge-scale-house-integration","text":"","title":"Levridge Scale House Integration"},{"location":"scale-integration/#azure-service-bus-explorer-for-integration","text":"Down - F&O to scale, Up - Scale to F&O Appsettings.json - configuration file, edit file to switch between up and down","title":"Azure service bus explorer for integration"},{"location":"scale-integration/#integration-fo-to-scale","text":"The link below contains the integration list that has the entities needed when integrating F&O to scale through System administration > Setup > Event Framework > Event framework events. https://teams.microsoft.com/_#/xlsx/viewer/teams/https:~2F~2Fstoneridgesoft.sharepoint.com~2Fsites~2Flevridge~2FShared%20Documents~2FGeneral~2FDevelopment~2FIntegration~2FIntegration%20Event%20Ordered%20Entity%20List.xlsx?threadId=19:7aa3b4752ccd44c38b06dca038958883@thread.skype&baseUrl=https:~2F~2Fstoneridgesoft.sharepoint.com~2Fsites~2Flevridge&fileId=8AEC9593-E967-4418-8201-6E6158C18F3E&ctx=files&viewerAction=edit System administration > Setup > Event framework > Event framework events Run azure service bus Down Run IntegrationConsole.cmd","title":"Integration F&amp;O to scale"},{"location":"scale-integration/#integration-scale-to-fo","text":"Run azure service bus Up Run IntegrationConsole.cmd When Print is clicked on the scale app, the ticket will then sync to F&O.","title":"Integration scale to F&amp;O"},{"location":"scale/","text":"Levridge Scale Installation Copy the folder name 'LevridgeScaleHouse' from its current location. Copy it to your computers C:Drive This will take around 15 to 30 minutes to complete. Once copied, open PowerShell as an administrator. Run command: Cd C:\\LevridgeScaleHouse\\ Next run command: .\\ScaleHouseAppInstall.ps1 -installFullPackage $true If presented with an error stating 'cannot be loaded because running scripts is disabled on this system' then run command: Set-ExecutionPolicy Unrestricted [Y] for Yes For the next step, run command: .\\ScaleHouseAppInstall.ps1 -installFullPackage $true You will see a few errors depending on your system settings. It should then bring you to a Microsoft SQL Server Installer. If installation should stop during SQL Server Installation. Run command: Install-module-name SqlServer [Y] After this, you should be seeing Windows IIS features being enabled. Once this has been completed, search IIS in Windows Search. Three sites should show: Right click the Default Web Site. Select manage web site and stop web site. The installations should enable two window services. Hardware LevScale Printer Eventually some integration service The installation will turn on IIS, .Net, and SQL windows features. The installation will also create App Pools along with websites to run the website server. You will need to setup websites to address them.","title":"Scale Installation"},{"location":"scale/#levridge-scale-installation","text":"Copy the folder name 'LevridgeScaleHouse' from its current location. Copy it to your computers C:Drive This will take around 15 to 30 minutes to complete. Once copied, open PowerShell as an administrator. Run command: Cd C:\\LevridgeScaleHouse\\ Next run command: .\\ScaleHouseAppInstall.ps1 -installFullPackage $true If presented with an error stating 'cannot be loaded because running scripts is disabled on this system' then run command: Set-ExecutionPolicy Unrestricted [Y] for Yes For the next step, run command: .\\ScaleHouseAppInstall.ps1 -installFullPackage $true You will see a few errors depending on your system settings. It should then bring you to a Microsoft SQL Server Installer. If installation should stop during SQL Server Installation. Run command: Install-module-name SqlServer [Y] After this, you should be seeing Windows IIS features being enabled. Once this has been completed, search IIS in Windows Search. Three sites should show: Right click the Default Web Site. Select manage web site and stop web site. The installations should enable two window services. Hardware LevScale Printer Eventually some integration service The installation will turn on IIS, .Net, and SQL windows features. The installation will also create App Pools along with websites to run the website server. You will need to setup websites to address them.","title":"Levridge Scale Installation"}]}